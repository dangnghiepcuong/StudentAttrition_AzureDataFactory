{
	"name": "student_attrition",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "InputExcel",
						"type": "DatasetReference"
					},
					"name": "UnivData1csv"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "OutputCSV",
						"type": "DatasetReference"
					},
					"name": "PreprocessedDatacsv"
				}
			],
			"transformations": [
				{
					"name": "NotNullOnID"
				},
				{
					"name": "DiscretizeValues",
					"description": "Discretize continuous values into discrete values."
				},
				{
					"name": "EncodingData",
					"description": "Transform columns have discrete string values to discrete numbers."
				},
				{
					"name": "FormatMoneyColumns",
					"description": "Replace blank values with 0, remove \",\" in string."
				},
				{
					"name": "TypeCast",
					"description": "Cast columns to interger type"
				},
				{
					"name": "CalcAvgTermGrd"
				},
				{
					"name": "CalcAvgYrGrd"
				},
				{
					"name": "DiscretizeGrdAtd"
				},
				{
					"name": "SelectColumns"
				},
				{
					"name": "SelectBFTransforming"
				},
				{
					"name": "CalcAtdRatio"
				}
			],
			"scriptLines": [
				"source(output(",
				"          {STUDENT IDENTIFIER} as string,",
				"          STDNT_AGE as integer,",
				"          STDNT_GENDER as string,",
				"          STDNT_BACKGROUND as string,",
				"          IN_STATE_FLAG as string,",
				"          INTERNATIONAL_STS as string,",
				"          STDNT_MAJOR as string,",
				"          STDNT_MINOR as string,",
				"          STDNT_TEST_ENTRANCE1 as integer,",
				"          STDNT_TEST_ENTRANCE2 as integer,",
				"          STDNT_TEST_ENTRANCE_COMB as integer,",
				"          FIRST_TERM as string,",
				"          CORE_COURSE_NAME_1_F as string,",
				"          CORE_COURSE_GRADE_1_F as string,",
				"          CORE_COURSE_NAME_2_F as string,",
				"          CORE_COURSE_GRADE_2_F as string,",
				"          CORE_COURSE_NAME_3_F as string,",
				"          CORE_COURSE_GRADE_3_F as string,",
				"          CORE_COURSE_NAME_4_F as string,",
				"          CORE_COURSE_GRADE_4_F as string,",
				"          CORE_COURSE_NAME_5_F as string,",
				"          CORE_COURSE_GRADE_5_F as string,",
				"          CORE_COURSE_NAME_6_F as string,",
				"          CORE_COURSE_GRADE_6_F as string,",
				"          SECOND_TERM as string,",
				"          CORE_COURSE_NAME_1_S as string,",
				"          CORE_COURSE_GRADE_1_S as string,",
				"          CORE_COURSE_NAME_2_S as string,",
				"          CORE_COURSE_GRADE_2_S as string,",
				"          CORE_COURSE_NAME_3_S as string,",
				"          CORE_COURSE_GRADE_3_S as string,",
				"          CORE_COURSE_NAME_4_S as string,",
				"          CORE_COURSE_GRADE_4_S as string,",
				"          CORE_COURSE_NAME_5_S as string,",
				"          CORE_COURSE_GRADE_5_S as string,",
				"          CORE_COURSE_NAME_6_S as string,",
				"          CORE_COURSE_GRADE_6_S as string,",
				"          HOUSING_STS as string,",
				"          RETURNED_2ND_YR as integer,",
				"          DISTANCE_FROM_HOME as integer,",
				"          HIGH_SCHL_GPA as float,",
				"          HIGH_SCHL_NAME as string,",
				"          FATHER_HI_EDU_CD as integer,",
				"          FATHER_HI_EDU_DESC as string,",
				"          MOTHER_HI_EDU_CD as integer,",
				"          MOTHER_HI_EDU_DESC as string,",
				"          DEGREE_GROUP_CD as string,",
				"          DEGREE_GROUP_DESC as string,",
				"          FIRST_TERM_ATTEMPT_HRS as integer,",
				"          FIRST_TERM_EARNED_HRS as integer,",
				"          SECOND_TERM_ATTEMPT_HRS as integer,",
				"          SECOND_TERM_EARNED_HRS as integer,",
				"          GROSS_FIN_NEED as string,",
				"          COST_OF_ATTEND as string,",
				"          EST_FAM_CONTRIBUTION as string,",
				"          UNMET_NEED as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> UnivData1csv",
				"SelectBFTransforming split(!isNull('STUDENT IDENTIFIER') && INTERNATIONAL_STS != \"\",",
				"     disjoint: false) ~> NotNullOnID@(StudentIDNotNull, StudentIDNull)",
				"TypeCast derive(STDNT_AGE = iif(STDNT_AGE < 18, 1, \r",
				"iif(STDNT_AGE >=  18 && STDNT_AGE <= 19, 2, \r",
				"iif(STDNT_AGE >= 20 && STDNT_AGE < 22, 3, \r",
				"iif(STDNT_AGE >= 22 && STDNT_AGE < 24, 4, 5)\r",
				"))),",
				"          STDNT_TEST_ENTRANCE2 = iif(STDNT_TEST_ENTRANCE2 < 400, 1, \r",
				"    iif(STDNT_TEST_ENTRANCE2 >= 400 && STDNT_TEST_ENTRANCE2 <= 710, 2, \r",
				"        iif(STDNT_TEST_ENTRANCE2 > 710 && STDNT_TEST_ENTRANCE2 <= 830, 3, \r",
				"            iif(STDNT_TEST_ENTRANCE2 > 830 && STDNT_TEST_ENTRANCE2 <= 950, 4, \r",
				"                iif(STDNT_TEST_ENTRANCE2 > 950 && STDNT_TEST_ENTRANCE2 <= 1110, 5, \r",
				"                    iif(STDNT_TEST_ENTRANCE2 > 1110 && STDNT_TEST_ENTRANCE2 <= 1270, 6, \r",
				"                        iif(STDNT_TEST_ENTRANCE2 > 1270 && STDNT_TEST_ENTRANCE2 <= 1470, 7, \r",
				"                            iif(STDNT_TEST_ENTRANCE2 > 1470, 8, \r",
				"                                -1\r",
				"                            )\r",
				"                        )\r",
				"                    )\r",
				"                )\r",
				"            )\r",
				"        )\r",
				"    )\r",
				"),",
				"          STDNT_TEST_ENTRANCE1 = iif(STDNT_TEST_ENTRANCE1 < 16, 1, \r",
				"    iif(STDNT_TEST_ENTRANCE1 >= 16 && STDNT_TEST_ENTRANCE1 < 20, 2, \r",
				"        iif(STDNT_TEST_ENTRANCE1 >= 20 && STDNT_TEST_ENTRANCE1 < 24, 3, \r",
				"            iif(STDNT_TEST_ENTRANCE1 >= 24 && STDNT_TEST_ENTRANCE1 < 26, 4,\r",
				"                iif(STDNT_TEST_ENTRANCE1 >= 26 && STDNT_TEST_ENTRANCE1 < 28, 5, \r",
				"                    iif(STDNT_TEST_ENTRANCE1 >= 28, 6, \r",
				"                        -1\r",
				"                    )\r",
				"                )\r",
				"            )\r",
				"        )\r",
				"    )\r",
				"),",
				"          STDNT_TEST_ENTRANCE_COMB = iif(STDNT_TEST_ENTRANCE_COMB < 400, 1, \r",
				"    iif(STDNT_TEST_ENTRANCE_COMB >= 400 && STDNT_TEST_ENTRANCE_COMB <= 710, 2, \r",
				"        iif(STDNT_TEST_ENTRANCE_COMB > 710 && STDNT_TEST_ENTRANCE_COMB <= 830, 3, \r",
				"            iif(STDNT_TEST_ENTRANCE_COMB > 830 && STDNT_TEST_ENTRANCE_COMB <= 950, 4, \r",
				"                iif(STDNT_TEST_ENTRANCE_COMB > 950 && STDNT_TEST_ENTRANCE_COMB <= 1110, 5, \r",
				"                    iif(STDNT_TEST_ENTRANCE_COMB > 1110 && STDNT_TEST_ENTRANCE_COMB <= 1270, 6, \r",
				"                        iif(STDNT_TEST_ENTRANCE_COMB > 1270 && STDNT_TEST_ENTRANCE_COMB <= 1470, 7, \r",
				"                            iif(STDNT_TEST_ENTRANCE_COMB > 1470, 8, \r",
				"                                -1\r",
				"                            )\r",
				"                        )\r",
				"                    )\r",
				"                )\r",
				"            )\r",
				"        )\r",
				"    )\r",
				"),",
				"          GROSS_FIN_NEED = iif(isNull(GROSS_FIN_NEED) || GROSS_FIN_NEED==0, 0,\r",
				"iif(GROSS_FIN_NEED >0 && GROSS_FIN_NEED <= 500000, 1,\r",
				"iif(GROSS_FIN_NEED >  500000 && GROSS_FIN_NEED < 1000000, 2,\r",
				"iif(GROSS_FIN_NEED >=  1000000 && GROSS_FIN_NEED < 1500000, 3,\r",
				"iif(GROSS_FIN_NEED >=  1500000 && GROSS_FIN_NEED < 2000000, 4,5\r",
				"))))),",
				"          COST_OF_ATTEND = iif(isNull(COST_OF_ATTEND) || COST_OF_ATTEND==0, 0,\r",
				"iif(COST_OF_ATTEND >0 && COST_OF_ATTEND <= 500000, 1,\r",
				"iif(COST_OF_ATTEND >  500000 && COST_OF_ATTEND < 1000000, 2,\r",
				"iif(COST_OF_ATTEND >=  1000000 && COST_OF_ATTEND < 1500000, 3,\r",
				"iif(COST_OF_ATTEND >=  1500000 && COST_OF_ATTEND < 2000000, 4,5))))),",
				"          EST_FAM_CONTRIBUTION = iif(isNull(EST_FAM_CONTRIBUTION) || EST_FAM_CONTRIBUTION==0, 0,\r",
				"iif(EST_FAM_CONTRIBUTION >0 && EST_FAM_CONTRIBUTION <= 1000000, 1,\r",
				"iif(EST_FAM_CONTRIBUTION >  100000 && EST_FAM_CONTRIBUTION < 3000000, 2,\r",
				"iif(EST_FAM_CONTRIBUTION >=  300000 && EST_FAM_CONTRIBUTION < 5000000, 3,4)))),",
				"          UNMET_NEED = iif(isNull(UNMET_NEED) ||UNMET_NEED==0, 0,\r",
				"iif(UNMET_NEED <-500000 , 1,\r",
				"iif(UNMET_NEED >-500000 && UNMET_NEED < 0, 2,\r",
				"iif(UNMET_NEED >  0 && UNMET_NEED < 500000, 3,4))))) ~> DiscretizeValues",
				"DiscretizeValues derive(STDNT_GENDER = iif(STDNT_GENDER == 'F', 0, 1),",
				"          IN_STATE_FLAG = iif(IN_STATE_FLAG =='Y', 1, 0),",
				"          INTERNATIONAL_STS = iif(INTERNATIONAL_STS=='Y', 1, 0),",
				"          HOUSING_STS = iif(HOUSING_STS=='On Campus', 1, 0),",
				"          STDNT_BACKGROUND = iif(STDNT_BACKGROUND =='BGD 1', 1, \r",
				"iif(STDNT_BACKGROUND =='BGD 2', 2, \r",
				"iif(STDNT_BACKGROUND =='BGD 3', 3, \r",
				"iif(STDNT_BACKGROUND =='BGD 4', 4, \r",
				"iif(STDNT_BACKGROUND =='BGD 5', 5, \r",
				"iif(STDNT_BACKGROUND =='BGD 6', 6, \r",
				"iif(STDNT_BACKGROUND =='BGD 7', 7,8 \r",
				"))))))),",
				"          FIRST_TERM = iif(FIRST_TERM =='200508', 1, \r",
				"iif(FIRST_TERM =='200608', 2, \r",
				"iif(FIRST_TERM =='200708', 3, \r",
				"iif(FIRST_TERM =='200808', 4, \r",
				"iif(FIRST_TERM =='200908', 5, 6\r",
				"))))),",
				"          SECOND_TERM = iif(FIRST_TERM =='200602', 1, \r",
				"iif(FIRST_TERM =='200702', 2, \r",
				"iif(FIRST_TERM =='200802', 3, \r",
				"iif(FIRST_TERM =='200902', 4, \r",
				"iif(FIRST_TERM =='201002', 5, 6\r",
				"))))),",
				"          FATHER_HI_EDU_CD = iif( isNull(FATHER_HI_EDU_CD), 0, FATHER_HI_EDU_CD),",
				"          MOTHER_HI_EDU_CD = iif( isNull(MOTHER_HI_EDU_CD), 0, MOTHER_HI_EDU_CD),",
				"          DEGREE_GROUP_CD = iif(DEGREE_GROUP_CD =='A', 1,  \r",
				"iif(DEGREE_GROUP_CD =='B', 2, 3\r",
				")),",
				"          STDNT_MAJOR = iif(STDNT_MAJOR == 'Undeclared', 0, \r",
				"iif(STDNT_MAJOR == 'Mathematics', 1, \r",
				"iif(STDNT_MAJOR == 'Art', 2, \r",
				"iif(STDNT_MAJOR == 'Political Science', 3, \r",
				"iif(STDNT_MAJOR == 'Biology', 4, \r",
				"iif(STDNT_MAJOR == 'Accounting', 5, \r",
				"iif(STDNT_MAJOR == 'Criminal Justice', 6, \r",
				"iif(STDNT_MAJOR == 'Psychology', 7, \r",
				"iif(STDNT_MAJOR == 'Theatre Arts', 8, \r",
				"iif(STDNT_MAJOR == 'Nursing', 9, \r",
				"iif(STDNT_MAJOR == 'Pre-Nursing', 10, \r",
				"iif(STDNT_MAJOR == 'Chemistry', 11, \r",
				"iif(STDNT_MAJOR == 'Pre-Engineering/RETP', 12, \r",
				"iif(STDNT_MAJOR == 'Early Childhood Education', 13, \r",
				"iif(STDNT_MAJOR == 'Music Performance', 14, \r",
				"iif(STDNT_MAJOR == 'English Language/Literature', 15, \r",
				"iif(STDNT_MAJOR == 'Joint Enrollment - Accel', 16, \r",
				"iif(STDNT_MAJOR == 'History and Secondary Ed', 17, \r",
				"iif(STDNT_MAJOR == 'History', 18, \r",
				"iif(STDNT_MAJOR == 'Engineering Studies', 19, \r",
				"iif(STDNT_MAJOR == 'Computer Science - Systems', 20, \r",
				"iif(STDNT_MAJOR == 'Pre-Business', 21, \r",
				"iif(STDNT_MAJOR == 'Management', 22, \r",
				"iif(STDNT_MAJOR == 'Theatre Education', 23, \r",
				"iif(STDNT_MAJOR == 'Marketing', 24, \r",
				"iif(STDNT_MAJOR == 'Communication', 25, \r",
				"iif(STDNT_MAJOR == 'Music Education', 26, \r",
				"iif(STDNT_MAJOR == 'French with Teacher Cert', 27, \r",
				"iif(STDNT_MAJOR == 'English and Secondary Ed', 28, \r",
				"iif(STDNT_MAJOR == 'Exercise Science', 29, \r",
				"iif(STDNT_MAJOR == 'General Business', 30, \r",
				"iif(STDNT_MAJOR == 'Mathematics and Secondary Ed', 31, \r",
				"iif(STDNT_MAJOR == 'Finance', 32, \r",
				"iif(STDNT_MAJOR == 'French', 33, \r",
				"iif(STDNT_MAJOR == 'Health Science', 34, \r",
				"iif(STDNT_MAJOR == 'Spec Ed: Gen. Curr. - Reading', 35, \r",
				"iif(STDNT_MAJOR == 'Music', 36, \r",
				"iif(STDNT_MAJOR == 'Middle Grades Education', 37, \r",
				"iif(STDNT_MAJOR == 'Geology', 38, \r",
				"iif(STDNT_MAJOR == 'Management Information Systems', 39, \r",
				"iif(STDNT_MAJOR == 'Art Education', 40, \r",
				"iif(STDNT_MAJOR == 'Applied Computer Science', 41, \r",
				"iif(STDNT_MAJOR == 'Information Technology', 42, \r",
				"iif(STDNT_MAJOR == 'Sociology', 43, \r",
				"iif(STDNT_MAJOR == 'Computer Science - Games', 44, \r",
				"iif(STDNT_MAJOR == 'Spanish', 45, \r",
				"iif(STDNT_MAJOR == 'General Studies/AS', 46, \r",
				"iif(STDNT_MAJOR == 'Biology and Secondary Ed', 47, \r",
				"iif(STDNT_MAJOR == 'Chemistry and Secondary Ed', 48, \r",
				"iif(STDNT_MAJOR == 'Health and Physical Education', 49, \r",
				"iif(STDNT_MAJOR == 'Liberal Arts', 50, \r",
				"iif(STDNT_MAJOR == 'Spanish with Teacher Cert', 51, \r",
				"iif(STDNT_MAJOR == 'Earth and Space Science', 52, \r",
				"iif(STDNT_MAJOR == 'Early Admission - Accel', 53, -1\r",
				")))))))))))))))))))))))))))))))))))))))))))))))))))))),",
				"          STDNT_MINOR = iif(STDNT_MAJOR == 'N', 0, iif(STDNT_MAJOR == 'Mathematics', 1, iif(STDNT_MAJOR == 'Art', 2, iif(STDNT_MAJOR == 'Political Science', 3, iif(STDNT_MAJOR == 'Biology', 4, iif(STDNT_MAJOR == 'Accounting', 5, iif(STDNT_MAJOR == 'Criminal Justice', 6, iif(STDNT_MAJOR == 'Psychology', 7, iif(STDNT_MAJOR == 'Theatre Arts', 8, iif(STDNT_MAJOR == 'Nursing', 9, iif(STDNT_MAJOR == 'Pre-Nursing', 10, iif(STDNT_MAJOR == 'Chemistry', 11, iif(STDNT_MAJOR == 'Pre-Engineering/RETP', 12, iif(STDNT_MAJOR == 'Early Childhood Education', 13, iif(STDNT_MAJOR == 'Music Performance', 14, iif(STDNT_MAJOR == 'English Language/Literature', 15, iif(STDNT_MAJOR == 'Joint Enrollment - Accel', 16, iif(STDNT_MAJOR == 'History and Secondary Ed', 17, iif(STDNT_MAJOR == 'History', 18, iif(STDNT_MAJOR == 'Engineering Studies', 19, iif(STDNT_MAJOR == 'Computer Science - Systems', 20, iif(STDNT_MAJOR == 'Pre-Business', 21, iif(STDNT_MAJOR == 'Management', 22, iif(STDNT_MAJOR == 'Theatre Education', 23, iif(STDNT_MAJOR == 'Marketing', 24, iif(STDNT_MAJOR == 'Communication', 25, iif(STDNT_MAJOR == 'Music Education', 26, iif(STDNT_MAJOR == 'French with Teacher Cert', 27, iif(STDNT_MAJOR == 'English and Secondary Ed', 28, iif(STDNT_MAJOR == 'Exercise Science', 29, iif(STDNT_MAJOR == 'General Business', 30, iif(STDNT_MAJOR == 'Mathematics and Secondary Ed', 31, iif(STDNT_MAJOR == 'Finance', 32, iif(STDNT_MAJOR == 'French', 33, iif(STDNT_MAJOR == 'Health Science', 34, iif(STDNT_MAJOR == 'Spec Ed: Gen. Curr. - Reading', 35, iif(STDNT_MAJOR == 'Music', 36, iif(STDNT_MAJOR == 'Middle Grades Education', 37, iif(STDNT_MAJOR == 'Geology', 38, iif(STDNT_MAJOR == 'Management Information Systems', 39, iif(STDNT_MAJOR == 'Art Education', 40, iif(STDNT_MAJOR == 'Applied Computer Science', 41, iif(STDNT_MAJOR == 'Information Technology', 42, iif(STDNT_MAJOR == 'Sociology', 43, iif(STDNT_MAJOR == 'Computer Science - Games', 44, iif(STDNT_MAJOR == 'Spanish', 45, iif(STDNT_MAJOR == 'General Studies/AS', 46, iif(STDNT_MAJOR == 'Biology and Secondary Ed', 47, iif(STDNT_MAJOR == 'Chemistry and Secondary Ed', 48, iif(STDNT_MAJOR == 'Health and Physical Education', 49, iif(STDNT_MAJOR == 'Liberal Arts', 50, iif(STDNT_MAJOR == 'Spanish with Teacher Cert', 51, iif(STDNT_MAJOR == 'Earth and Space Science', 52, iif(STDNT_MAJOR == 'Early Admission - Accel', 53, -1)))))))))))))))))))))))))))))))))))))))))))))))))))))),",
				"          DISTANCE_FROM_HOME = iif(DISTANCE_FROM_HOME <= 40, 0, \r",
				"iif(DISTANCE_FROM_HOME > 40 && DISTANCE_FROM_HOME <= 100, 1,\r",
				"iif(DISTANCE_FROM_HOME > 100 && DISTANCE_FROM_HOME <= 200, 2,\r",
				"iif(DISTANCE_FROM_HOME > 200 && DISTANCE_FROM_HOME <= 400, 3,\r",
				"iif(DISTANCE_FROM_HOME > 400, 7, 8))))),",
				"          CORE_COURSE_GRADE_1_F = iif(CORE_COURSE_GRADE_1_F == \"F\", 1,\r",
				"iif(CORE_COURSE_GRADE_1_F == \"D\", 2,\r",
				"iif(CORE_COURSE_GRADE_1_F == \"C\", 3,\r",
				"iif(CORE_COURSE_GRADE_1_F == \"B\", 4,\r",
				"iif(CORE_COURSE_GRADE_1_F == \"A\", 5,\r",
				"iif(CORE_COURSE_GRADE_1_F == \"NOT REP\" || CORE_COURSE_GRADE_1_F == \"INCOMPL\" || CORE_COURSE_GRADE_1_F == \"Unknow\", -1, -1\r",
				")))))),",
				"          CORE_COURSE_GRADE_2_F = iif(CORE_COURSE_GRADE_2_F == \"F\", 1,\r",
				"iif(CORE_COURSE_GRADE_2_F == \"D\", 2,\r",
				"iif(CORE_COURSE_GRADE_2_F == \"C\", 3,\r",
				"iif(CORE_COURSE_GRADE_2_F == \"B\", 4,\r",
				"iif(CORE_COURSE_GRADE_2_F == \"A\", 5,\r",
				"iif(CORE_COURSE_GRADE_2_F == \"NOT REP\" || CORE_COURSE_GRADE_2_F == \"INCOMPL\" || CORE_COURSE_GRADE_2_F == \"Unknow\", -1, -1\r",
				")))))),",
				"          CORE_COURSE_GRADE_3_F = iif(CORE_COURSE_GRADE_3_F == \"F\", 1,\r",
				"iif(CORE_COURSE_GRADE_3_F == \"D\", 2,\r",
				"iif(CORE_COURSE_GRADE_3_F == \"C\", 3,\r",
				"iif(CORE_COURSE_GRADE_3_F == \"B\", 4,\r",
				"iif(CORE_COURSE_GRADE_3_F == \"A\", 5,\r",
				"iif(CORE_COURSE_GRADE_3_F == \"NOT REP\" || CORE_COURSE_GRADE_3_F == \"INCOMPL\" || CORE_COURSE_GRADE_3_F == \"Unknow\", -1, -1\r",
				")))))),",
				"          CORE_COURSE_GRADE_4_F = iif(CORE_COURSE_GRADE_4_F == \"F\", 1,\r",
				"iif(CORE_COURSE_GRADE_4_F == \"D\", 2,\r",
				"iif(CORE_COURSE_GRADE_4_F == \"C\", 3,\r",
				"iif(CORE_COURSE_GRADE_4_F == \"B\", 4,\r",
				"iif(CORE_COURSE_GRADE_4_F == \"A\", 5,\r",
				"iif(CORE_COURSE_GRADE_4_F == \"NOT REP\" || CORE_COURSE_GRADE_4_F == \"INCOMPL\" || CORE_COURSE_GRADE_4_F == \"Unknow\", -1, -1\r",
				")))))),",
				"          CORE_COURSE_GRADE_5_F = iif(CORE_COURSE_GRADE_5_F == \"F\", 1,\r",
				"iif(CORE_COURSE_GRADE_5_F == \"D\", 2,\r",
				"iif(CORE_COURSE_GRADE_5_F == \"C\", 3,\r",
				"iif(CORE_COURSE_GRADE_5_F == \"B\", 4,\r",
				"iif(CORE_COURSE_GRADE_5_F == \"A\", 5,\r",
				"iif(CORE_COURSE_GRADE_5_F == \"NOT REP\" || CORE_COURSE_GRADE_5_F == \"INCOMPL\" || CORE_COURSE_GRADE_5_F == \"Unknow\", -1, -1\r",
				")))))),",
				"          CORE_COURSE_GRADE_6_F = iif(CORE_COURSE_GRADE_6_F == \"F\", 1,\r",
				"iif(CORE_COURSE_GRADE_6_F == \"D\", 2,\r",
				"iif(CORE_COURSE_GRADE_6_F == \"C\", 3,\r",
				"iif(CORE_COURSE_GRADE_6_F == \"B\", 4,\r",
				"iif(CORE_COURSE_GRADE_6_F == \"A\", 5,\r",
				"iif(CORE_COURSE_GRADE_6_F == \"NOT REP\" || CORE_COURSE_GRADE_6_F == \"INCOMPL\" || CORE_COURSE_GRADE_6_F == \"Unknow\", -1, -1\r",
				")))))),",
				"          CORE_COURSE_GRADE_1_S = iif(CORE_COURSE_GRADE_1_S == \"F\", 1,\r",
				"iif(CORE_COURSE_GRADE_1_S == \"D\", 2,\r",
				"iif(CORE_COURSE_GRADE_1_S == \"C\", 3,\r",
				"iif(CORE_COURSE_GRADE_1_S == \"B\", 4,\r",
				"iif(CORE_COURSE_GRADE_1_S == \"A\", 5,\r",
				"iif(CORE_COURSE_GRADE_1_S == \"NOT REP\" || CORE_COURSE_GRADE_1_S == \"INCOMPL\" || CORE_COURSE_GRADE_1_S == \"Unknow\", -1, -1\r",
				")))))),",
				"          CORE_COURSE_GRADE_2_S = iif(CORE_COURSE_GRADE_2_S == \"F\", 1,\r",
				"iif(CORE_COURSE_GRADE_2_S == \"D\", 2,\r",
				"iif(CORE_COURSE_GRADE_2_S == \"C\", 3,\r",
				"iif(CORE_COURSE_GRADE_2_S == \"B\", 4,\r",
				"iif(CORE_COURSE_GRADE_2_S == \"A\", 5,\r",
				"iif(CORE_COURSE_GRADE_2_S == \"NOT REP\" || CORE_COURSE_GRADE_2_S == \"INCOMPL\" || CORE_COURSE_GRADE_2_S == \"Unknow\", -1, -1\r",
				")))))),",
				"          CORE_COURSE_GRADE_3_S = iif(CORE_COURSE_GRADE_3_S == \"F\", 1,\r",
				"iif(CORE_COURSE_GRADE_3_S == \"D\", 2,\r",
				"iif(CORE_COURSE_GRADE_3_S == \"C\", 3,\r",
				"iif(CORE_COURSE_GRADE_3_S == \"B\", 4,\r",
				"iif(CORE_COURSE_GRADE_3_S == \"A\", 5,\r",
				"iif(CORE_COURSE_GRADE_3_S == \"NOT REP\" || CORE_COURSE_GRADE_3_S == \"INCOMPL\" || CORE_COURSE_GRADE_3_S == \"Unknow\", -1, -1\r",
				")))))),",
				"          CORE_COURSE_GRADE_4_S = iif(CORE_COURSE_GRADE_4_S == \"F\", 1,\r",
				"iif(CORE_COURSE_GRADE_4_S == \"D\", 2,\r",
				"iif(CORE_COURSE_GRADE_4_S == \"C\", 3,\r",
				"iif(CORE_COURSE_GRADE_4_S == \"B\", 4,\r",
				"iif(CORE_COURSE_GRADE_4_S == \"A\", 5,\r",
				"iif(CORE_COURSE_GRADE_4_S == \"NOT REP\" || CORE_COURSE_GRADE_4_S == \"INCOMPL\" || CORE_COURSE_GRADE_4_S == \"Unknow\", -1, -1\r",
				")))))),",
				"          CORE_COURSE_GRADE_5_S = iif(CORE_COURSE_GRADE_5_S == \"F\", 1,\r",
				"iif(CORE_COURSE_GRADE_5_S == \"D\", 2,\r",
				"iif(CORE_COURSE_GRADE_5_S == \"C\", 3,\r",
				"iif(CORE_COURSE_GRADE_5_S == \"B\", 4,\r",
				"iif(CORE_COURSE_GRADE_5_S == \"A\", 5,\r",
				"iif(CORE_COURSE_GRADE_5_S == \"NOT REP\" || CORE_COURSE_GRADE_5_S == \"INCOMPL\" || CORE_COURSE_GRADE_5_S == \"Unknow\", -1, -1\r",
				")))))),",
				"          CORE_COURSE_GRADE_6_S = iif(CORE_COURSE_GRADE_6_S == \"F\", 1,\r",
				"iif(CORE_COURSE_GRADE_6_S == \"D\", 2,\r",
				"iif(CORE_COURSE_GRADE_6_S == \"C\", 3,\r",
				"iif(CORE_COURSE_GRADE_6_S == \"B\", 4,\r",
				"iif(CORE_COURSE_GRADE_6_S == \"A\", 5,\r",
				"iif(CORE_COURSE_GRADE_6_S == \"NOT REP\" || CORE_COURSE_GRADE_6_S == \"INCOMPL\" || CORE_COURSE_GRADE_6_S == \"Unknow\", -1, -1\r",
				"))))))) ~> EncodingData",
				"NotNullOnID@StudentIDNotNull derive(GROSS_FIN_NEED = replace(replace(GROSS_FIN_NEED, ' -   ', '0'), ',', ''),",
				"          COST_OF_ATTEND = replace(replace(COST_OF_ATTEND, ' -   ', '0'), ',', ''),",
				"          EST_FAM_CONTRIBUTION = replace(replace(EST_FAM_CONTRIBUTION, ' -   ', '0'), ',', ''),",
				"          UNMET_NEED = replace(replace(UNMET_NEED, ' -   ', '0'), ',', '')) ~> FormatMoneyColumns",
				"FormatMoneyColumns cast(output(",
				"          STDNT_AGE as integer,",
				"          STDNT_TEST_ENTRANCE1 as integer,",
				"          STDNT_TEST_ENTRANCE2 as integer,",
				"          STDNT_TEST_ENTRANCE_COMB as integer,",
				"          GROSS_FIN_NEED as integer,",
				"          COST_OF_ATTEND as integer,",
				"          EST_FAM_CONTRIBUTION as integer,",
				"          UNMET_NEED as integer",
				"     ),",
				"     errors: true) ~> TypeCast",
				"EncodingData derive(COUNT_CRS_F = iif(CORE_COURSE_GRADE_1_F != -1, 1, 0) +\r",
				"iif(CORE_COURSE_GRADE_2_F != -1, 1, 0) +\r",
				"iif(CORE_COURSE_GRADE_3_F != -1, 1, 0) +\r",
				"iif(CORE_COURSE_GRADE_4_F != -1, 1, 0) +\r",
				"iif(CORE_COURSE_GRADE_5_F != -1, 1, 0) +\r",
				"iif(CORE_COURSE_GRADE_6_F != -1, 1, 0),",
				"          AVG_F_GRD = (iif(CORE_COURSE_GRADE_1_F != -1, CORE_COURSE_GRADE_1_F, 0) +\r",
				"iif(CORE_COURSE_GRADE_2_F != -1, CORE_COURSE_GRADE_2_F, 0) +\r",
				"iif(CORE_COURSE_GRADE_3_F != -1, CORE_COURSE_GRADE_3_F, 0) +\r",
				"iif(CORE_COURSE_GRADE_4_F != -1, CORE_COURSE_GRADE_4_F, 0) +\r",
				"iif(CORE_COURSE_GRADE_5_F != -1, CORE_COURSE_GRADE_5_F, 0) +\r",
				"iif(CORE_COURSE_GRADE_6_F != -1, CORE_COURSE_GRADE_6_F, 0))\r",
				"/\r",
				"(iif(CORE_COURSE_GRADE_1_F != -1, 1, 0) +\r",
				"iif(CORE_COURSE_GRADE_2_F != -1, 1, 0) +\r",
				"iif(CORE_COURSE_GRADE_3_F != -1, 1, 0) +\r",
				"iif(CORE_COURSE_GRADE_4_F != -1, 1, 0) +\r",
				"iif(CORE_COURSE_GRADE_5_F != -1, 1, 0) +\r",
				"iif(CORE_COURSE_GRADE_6_F != -1, 1, 0)),",
				"          COUNT_CRS_S = iif(CORE_COURSE_GRADE_1_S != -1, 1, 0) +\r",
				"iif(CORE_COURSE_GRADE_2_S != -1, 1, 0) +\r",
				"iif(CORE_COURSE_GRADE_3_S != -1, 1, 0) +\r",
				"iif(CORE_COURSE_GRADE_4_S != -1, 1, 0) +\r",
				"iif(CORE_COURSE_GRADE_5_S != -1, 1, 0) +\r",
				"iif(CORE_COURSE_GRADE_6_S != -1, 1, 0),",
				"          AVG_S_GRD = (iif(CORE_COURSE_GRADE_1_S != -1, CORE_COURSE_GRADE_1_S, 0) +\r",
				"iif(CORE_COURSE_GRADE_2_S != -1, CORE_COURSE_GRADE_2_S, 0) +\r",
				"iif(CORE_COURSE_GRADE_3_S != -1, CORE_COURSE_GRADE_3_S, 0) +\r",
				"iif(CORE_COURSE_GRADE_4_S != -1, CORE_COURSE_GRADE_4_S, 0) +\r",
				"iif(CORE_COURSE_GRADE_5_S != -1, CORE_COURSE_GRADE_5_S, 0) +\r",
				"iif(CORE_COURSE_GRADE_6_S != -1, CORE_COURSE_GRADE_6_S, 0))\r",
				"/\r",
				"(iif(CORE_COURSE_GRADE_1_S != -1, 1, 0) +\r",
				"iif(CORE_COURSE_GRADE_2_S != -1, 1, 0) +\r",
				"iif(CORE_COURSE_GRADE_3_S != -1, 1, 0) +\r",
				"iif(CORE_COURSE_GRADE_4_S != -1, 1, 0) +\r",
				"iif(CORE_COURSE_GRADE_5_S != -1, 1, 0) +\r",
				"iif(CORE_COURSE_GRADE_6_S != -1, 1, 0))) ~> CalcAvgTermGrd",
				"CalcAvgTermGrd derive(AVG_YRS_GRD = iif(isNull(AVG_F_GRD) || isNull(AVG_S_GRD), -1, (AVG_F_GRD + AVG_S_GRD)/2)) ~> CalcAvgYrGrd",
				"CalcAtdRatio derive(AVG_F_GRD = iif(isNull(AVG_F_GRD), -1,\r",
				"iif(AVG_F_GRD < 2.5, 1,\r",
				"iif(AVG_F_GRD >= 2.5 && AVG_F_GRD < 4, 2, 3\r",
				"))),",
				"          AVG_S_GRD = iif(isNull(AVG_S_GRD), -1,\r",
				"iif(AVG_S_GRD < 2.5, 1,\r",
				"iif(AVG_S_GRD >= 2.5 && AVG_S_GRD < 4, 2, 3\r",
				"))),",
				"          AVG_YRS_GRD = iif(AVG_YRS_GRD == -1, -1,\r",
				"iif(AVG_YRS_GRD < 2.5, 1,\r",
				"iif(AVG_YRS_GRD >= 2.5 && AVG_YRS_GRD < 4, 2, 3\r",
				"))),",
				"          ATD_RATIO_F = iif(ATD_RATIO_F < 0.5, 1,\r",
				"iif(ATD_RATIO_F >= 0.5 && ATD_RATIO_F < 0.8, 2,\r",
				"iif(ATD_RATIO_F >= 0.8, 3, -1))),",
				"          ATD_RATIO_S = iif(ATD_RATIO_S < 0.5, 1,\r",
				"iif(ATD_RATIO_S >= 0.5 && ATD_RATIO_S < 0.8, 2,\r",
				"iif(ATD_RATIO_S >= 0.8, 3, -1)))) ~> DiscretizeGrdAtd",
				"DiscretizeGrdAtd select(mapColumn(",
				"          STDNT_AGE,",
				"          STDNT_GENDER,",
				"          STDNT_BACKGROUND,",
				"          IN_STATE_FLAG,",
				"          INTERNATIONAL_STS,",
				"          STDNT_MAJOR,",
				"          STDNT_MINOR,",
				"          FIRST_TERM,",
				"          COUNT_CRS_F,",
				"          AVG_F_GRD,",
				"          COUNT_CRS_S,",
				"          AVG_S_GRD,",
				"          AVG_YRS_GRD,",
				"          HOUSING_STS,",
				"          DISTANCE_FROM_HOME,",
				"          FATHER_HI_EDU_CD,",
				"          MOTHER_HI_EDU_CD,",
				"          DEGREE_GROUP_CD,",
				"          ATD_RATIO_F,",
				"          ATD_RATIO_S,",
				"          GROSS_FIN_NEED,",
				"          COST_OF_ATTEND,",
				"          EST_FAM_CONTRIBUTION,",
				"          UNMET_NEED,",
				"          RETURNED_2ND_YR",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectColumns",
				"UnivData1csv select(mapColumn(",
				"          STDNT_AGE,",
				"          STDNT_GENDER,",
				"          STDNT_BACKGROUND,",
				"          IN_STATE_FLAG,",
				"          INTERNATIONAL_STS,",
				"          STDNT_MAJOR,",
				"          STDNT_MINOR,",
				"          STDNT_TEST_ENTRANCE1,",
				"          STDNT_TEST_ENTRANCE2,",
				"          STDNT_TEST_ENTRANCE_COMB,",
				"          FIRST_TERM,",
				"          CORE_COURSE_GRADE_1_F,",
				"          CORE_COURSE_GRADE_2_F,",
				"          CORE_COURSE_GRADE_3_F,",
				"          CORE_COURSE_GRADE_4_F,",
				"          CORE_COURSE_GRADE_5_F,",
				"          CORE_COURSE_GRADE_6_F,",
				"          SECOND_TERM,",
				"          CORE_COURSE_GRADE_1_S,",
				"          CORE_COURSE_GRADE_2_S,",
				"          CORE_COURSE_GRADE_3_S,",
				"          CORE_COURSE_GRADE_4_S,",
				"          CORE_COURSE_GRADE_5_S,",
				"          CORE_COURSE_GRADE_6_S,",
				"          HOUSING_STS,",
				"          RETURNED_2ND_YR,",
				"          DISTANCE_FROM_HOME,",
				"          HIGH_SCHL_GPA,",
				"          FATHER_HI_EDU_CD,",
				"          MOTHER_HI_EDU_CD,",
				"          DEGREE_GROUP_CD,",
				"          FIRST_TERM_ATTEMPT_HRS,",
				"          FIRST_TERM_EARNED_HRS,",
				"          SECOND_TERM_ATTEMPT_HRS,",
				"          SECOND_TERM_EARNED_HRS,",
				"          GROSS_FIN_NEED,",
				"          COST_OF_ATTEND,",
				"          EST_FAM_CONTRIBUTION,",
				"          UNMET_NEED",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectBFTransforming",
				"CalcAvgYrGrd derive(ATD_RATIO_F = FIRST_TERM_EARNED_HRS/FIRST_TERM_ATTEMPT_HRS,",
				"          ATD_RATIO_S = SECOND_TERM_EARNED_HRS/SECOND_TERM_ATTEMPT_HRS) ~> CalcAtdRatio",
				"SelectColumns sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          STUDENT_IDENTIFIER as string,",
				"          STDNT_AGE as string,",
				"          STDNT_GENDER as string,",
				"          STDNT_BACKGROUND as string,",
				"          IN_STATE_FLAG as string,",
				"          INTERNATIONAL_STS as string,",
				"          STDNT_MAJOR as string,",
				"          STDNT_MINOR as string,",
				"          STDNT_TEST_ENTRANCE1 as string,",
				"          STDNT_TEST_ENTRANCE2 as string,",
				"          STDNT_TEST_ENTRANCE_COMB as string,",
				"          FIRST_TERM as string,",
				"          CORE_COURSE_NAME_1_F as string,",
				"          CORE_COURSE_GRADE_1_F as string,",
				"          CORE_COURSE_NAME_2_F as string,",
				"          CORE_COURSE_GRADE_2_F as string,",
				"          CORE_COURSE_NAME_3_F as string,",
				"          CORE_COURSE_GRADE_3_F as string,",
				"          CORE_COURSE_NAME_4_F as string,",
				"          CORE_COURSE_GRADE_4_F as string,",
				"          CORE_COURSE_NAME_5_F as string,",
				"          CORE_COURSE_GRADE_5_F as string,",
				"          CORE_COURSE_NAME_6_F as string,",
				"          CORE_COURSE_GRADE_6_F as string,",
				"          SECOND_TERM as string,",
				"          CORE_COURSE_NAME_1_S as string,",
				"          CORE_COURSE_GRADE_1_S as string,",
				"          CORE_COURSE_NAME_2_S as string,",
				"          CORE_COURSE_GRADE_2_S as string,",
				"          CORE_COURSE_NAME_3_S as string,",
				"          CORE_COURSE_GRADE_3_S as string,",
				"          CORE_COURSE_NAME_4_S as string,",
				"          CORE_COURSE_GRADE_4_S as string,",
				"          CORE_COURSE_NAME_5_S as string,",
				"          CORE_COURSE_GRADE_5_S as string,",
				"          CORE_COURSE_NAME_6_S as string,",
				"          CORE_COURSE_GRADE_6_S as string,",
				"          HOUSING_STS as string,",
				"          RETURNED_2ND_YR as string,",
				"          DISTANCE_FROM_HOME as string,",
				"          HIGH_SCHL_GPA as string,",
				"          HIGH_SCHL_NAME as string,",
				"          FATHER_HI_EDU_CD as string,",
				"          FATHER_HI_EDU_DESC as string,",
				"          MOTHER_HI_EDU_CD as string,",
				"          MOTHER_HI_EDU_DESC as string,",
				"          DEGREE_GROUP_CD as string,",
				"          DEGREE_GROUP_DESC as string,",
				"          FIRST_TERM_ATTEMPT_HRS as string,",
				"          FIRST_TERM_EARNED_HRS as string,",
				"          SECOND_TERM_ATTEMPT_HRS as string,",
				"          SECOND_TERM_EARNED_HRS as string,",
				"          GROSS_FIN_NEED as string,",
				"          COST_OF_ATTEND as string,",
				"          EST_FAM_CONTRIBUTION as string,",
				"          UNMET_NEED as string",
				"     ),",
				"     partitionFileNames:['UnivData2.csv'],",
				"     partitionBy('hash', 1)) ~> PreprocessedDatacsv"
			]
		}
	}
}